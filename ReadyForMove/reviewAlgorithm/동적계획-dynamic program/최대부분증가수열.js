//N개의 자연수로 이루어진 수열이 주어졌을 때,
// 그 중에서 가장 길게 증가하는(작은 수에서 큰 수로)
// 원소들의 집합을 찾는 프로그램을 작성하라.
// 예를 들어, 원소가 2, 7, 5, 8, 6, 4, 7, 12, 3
// 이면 가장 길게 증가하도록 원소들을 차례대로 뽑아내면
// 2, 5, 6, 7, 12를 뽑아내어 길 이가 5인 최대 부분 증가수열을 만들 수 있다.

// ▣ 입력설명
// 첫째 줄은 입력되는 데이터의 수 N(1≤N≤1,000, 자연수)를 의미하고,
// 둘째 줄은 N개의 입력데이터들이 주어진다.

// ▣ 출력설명
// 첫 번째 줄에 부분증가수열의 최대 길이를 출력한다.

// ▣ 입력예제
// 1
// 8
// 5 3 7 8 6 2 9 4
// ▣ 출력예제 1
// 4


// 이것도 동적계획임
// dy[i]의 의미는 arr[i]가 증가수열의 마지막 숫자라고 생각

// arr[0] = 5
// 5가 마지막 부분수열인 경우 1
// arr[1] = 3
// 3 이 마지막 1
// arr[2] = 7
// dy[2] = dy[0] + dy[1]
// arr[3] = 8
// dy[3] = dy중에 젤 긴거 dy[2] + 1
// arr[i]의 숫자가 앞의 숫자들중에 작은 애들
function solution(arr) {
    let dy = Array.from({length: arr.length}, () => 0);

    dy[0] = 1;

    for(let i = 1; i < arr.length; i++) {
        const now = arr[i];
        let max = 0;
        for (let j = i - 1; j >= 0; j--) {
            if(now > arr[j] && max < dy[j]) {
                max = dy[j];
            }
            dy[i] = max + 1;
        }
    }

    return Math.max(...dy)
}

console.log(solution([5,3,7,8,6,2,9,4]))
