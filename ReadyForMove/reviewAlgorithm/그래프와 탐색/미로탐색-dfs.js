//7*7 격자판 미로를 탈출하는 경로의 가지수를 출력하는 프로그램을 작성하세요.
// 출발점은 격 자의 (1, 1) 좌표이고, 탈출 도착점은 (7, 7)좌표이다.
// 격자판의 1은 벽이고, 0은 통로이다. 격 자판의 움직임은 상하좌우로만 움직인다
// 미로가 다음과 같다면

//위의 지도에서 출발점에서 도착점까지 갈 수 있는 방법의 수는 8가지이다.

// x, y좌표 움직일 수 있는 걸
// const dx = [-1, 0, 1, 0];
// const dy = [0, 1, 0, -1];
// 네 방향으로 가게 만듬

// ▣ 입력설명
// 7*7 격자판의 정보가 주어집니다.

// ▣ 출력설명
// 첫 번째 줄에 경로의 가지수를 출력한다.

// ▣ 입력예제 1
// 0000000
// 0111110
// 0001000
// 1101011
// 1100001
// 1101100
// 1000000
// ▣ 출력예제 1
// 8

//[
//   [0, 0, 0, 0, 0, 0, 0],
//   [0, 1, 1, 1, 1, 1, 0],
//   [1, 1, 0, 1, 0, 1, 1],
//   [1, 1, 0, 0, 0, 0, 1],
//   [1, 1, 0, 1, 1, 0, 0],
//   [1, 0, 0, 0, 0, 0, 0]
// ]
const miro = [[0, 0, 0, 0, 0, 0, 0],
    [0, 1, 1, 1, 1, 1, 0],
    [0, 0, 0, 1, 0, 0, 0],
    [1, 1, 0, 1, 0, 1, 1],
    [1, 1, 0, 0, 0, 0, 1],
    [1, 1, 0, 1, 1, 0, 0],
    [1, 0, 0, 0, 0, 0, 0]];

function solution(board) {
    let answer = 0;
    const dx = [-1, 0, 1, 0];
    const dy = [0, 1, 0, -1];

    function DFS(x, y) {
        if (x === 6 && y === 6) {
            answer ++;
        } else {
            for(let i = 0; i < 4; i++) {
                const mx = x + dx[i];
                const my = y + dy[i];

                if (mx > -1 && mx < 7 && my < 7 && my > -1 && board[mx][my] === 0) {
                    board[mx][my] = 1;
                    DFS(mx, my);
                    board[mx][my] = 0;
                }

            }
        }
    }

    board[0][0] = 1;
    DFS(0, 0)
    return answer;
}

console.log(solution(miro))
