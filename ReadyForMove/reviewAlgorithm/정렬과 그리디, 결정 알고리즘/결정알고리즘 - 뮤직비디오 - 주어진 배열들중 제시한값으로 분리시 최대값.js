//DVD에는 총 N개의 곡이 들어가는데,
// DVD에 녹화할 때에는 라이브에서의 순서가 그대로 유지 되어야 한다.
// 즉, 1번 노래와 5번 노래를 같은 DVD에 녹화하기 위해서는
// 1번과 5번 사이의 모든 노래도 같은 DVD에 녹화해야 한다.
// 또한 한 노래를 쪼개서 두 개의 DVD에 녹화하면 안된다.
// 지니레코드 입장에서는 이 DVD가 팔릴 것인지 확신할 수 없기 때문에
// 이 사업에 낭비되는 DVD를 가급적 줄이려고 한다.
// 고민 끝에 지니레코드는 M개의 DVD에 모든 동영상을 녹화하기 로 하였다.
// 이 때 DVD의 크기(녹화 가능한 길이)를 최소로 하려고 한다.
// 그리고 M개의 DVD는 모두 같은 크기여야 제조원가가 적게 들기 때문에
// 꼭 같은 크기로 해야 한다.

//▣ 입력설명
// 첫째 줄에 자연수
// N(1≤N≤1,000), M(1≤M≤N)이 주어진다.
// 다음 줄에는 조영필이 라이브에서 부른 순서대로 부른 곡의 길이가
// 분 단위로(자연수) 주어진다. 부른 곡의 길이는 10,000분을 넘지 않는다고 가정하자.

// ▣ 출력설명
// 첫 번째 줄부터 DVD의 최소 용량 크기를 출력하세요.

// ▣ 입력예제 1
// 9 3
// 1 2 3 4 5 6 7 8 9
// ▣ 출력예제 1
// 17
// 설명 :
// 3개의 DVD용량이 17분짜리이면
// (1, 2, 3, 4, 5) (6, 7), (8, 9)
// 이렇게 3개의 DVD로 녹음을 할 수 있다.

// 결정알고리즘의 기본은 이분검색(이분탐색)이다.

// 17분 용량보다 작은 용량으로는 3개의 DVD에 모든 영상을 녹화할 수 없다.
// 배열은 순서대로 아닐수 도 있음 , (근데 순서대로 넣어야해서 상관은 없음)
// 파일 크기의 최소값은 1개는 들어가야하니까 젤 큰값임. => left
// right => 파일 1개에 다 넣어야 할 수도 있기에 right는 크기를 다 합한 값이 되어야함.
// 사실 right는 큰 숫자여도 상관 없는게 이분검색이라서 팍팍 줄어서 상관없긴함
// 주어진 파일 개수보다 mid용량으로 담았을때
// !!! 개수가 작으면 target에는 당연히 담을 수 있다.
// 근데 더 적은 값을 찾아가야하기에
// right를 mid로 바꿈
// 개수가 딱 맞으면 그것도 답이 됨.
// left 가 right보다 커질때까지 whlie문을 돌리는거고, cd개수가 늘때마다 사이즈는 줆
// 타겟보다 작거나 같을때까지 돌리는거임

function count(songs, target) {
    let cnt = 1;
    let sum = 0;

    for(const song of songs) {
        if(sum + song > target) {
            sum = song;
            cnt += 1;
        } else {
            sum += song;
        }
    }
    return cnt;
}

function solution(target, songs) {
    let answer = 0;
    let left = Math.max(...songs);
    let right = songs.reduce((a, b) => a + b, 0);

    while (left <= right) {
        const mid = Math.floor((left + right) / 2);

        if (count(songs, mid) <= target) {
            right = mid - 1;
            answer = mid;
        } else {
            left = mid + 1;
        }
    }
    return answer;
}

console.log(solution(3, [1,2,3,4,5,6,7,8,9]))

