//N개이 숫자가 입력되면 오름차순으로 정렬하여 출력하는 프로그램을 작성하세요.
// 정렬하는 방법은 선택정렬입니다.
//
// ▣ 입력설명
// 첫 번째 줄에 자연수 N(1<=N<=100)이 주어집니다.
// 두 번째 줄에 N개의 자연수가 공백을 사이에 두고 입력됩니다.
// 각 자연수는 정수형 범위 안에 있습니다.
//
// ▣ 출력설명
// 오름차순으로 정렬된 수열을 출력합니다.
//
// ▣ 입력예제 1
// 6
// 13 5 11 7 23 15
//
// ▣ 출력예제 1
// 5 7 11 13 15 23

// 버블소트의 전략은 이웃한 두 수끼리 비교해 바꿔준다.
// 이중포문

// i가 0일때 젤 뒤 숫자가 큰 숫자로 결정남
//서로 이웃한 데이터들을 비교하며 가장 큰 데이터를 가장 뒤로 보내며 정렬하는 방식이다.
// 시간 복잡도는 O(n^2)이 됩니다.
//
// 버블 정렬은 비교적 단순하고 이해하기 쉬우며 구현이 간단하지만,
// 대규모 데이터에 대해서는 매우 비효율적이며 다른 고급 정렬 알고리즘들에 비해 성능이 낮습니다.
// 따라서 일반적으로 큰 데이터셋에서 사용되지는 않습니다.

function solution (arr) {
    const len = arr.length;

    // 인접한 두개 비교해야해서 맨뒤는 +1 한게 비교할거라 안함
    for (let i = 0; i < len - 1; i++) {
        // 맨뒤는 젤 큰거로 바궛으니 필요 없어서 -i
        for (let j = i; j < len - i - 1; j++) {
            if(arr[j] > arr[j + 1]) {
                [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
            }
        }
    }

    return arr;
}

console.log(solution([13, 5, 11, 7, 23, 15]))